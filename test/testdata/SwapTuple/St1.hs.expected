module SwapTuple.St1 where
   import Control.Concurrent

   type Foo_old = (String, Int)

   type Foo = (Int, String)

   toNew :: Foo_old -> Foo
   toNew (s,i) = (i,s)

   toOld :: Foo -> Foo_old
   toOld (i,s) = (s,i)
   
   mkFoo :: Int -> String -> Foo_old
   mkFoo i s = (s,i)
   
   getStr :: Foo_old -> String
   getStr foo = fst foo

   getInt :: Foo_old -> Int
   getInt (_,i) = i

   inc :: Foo_old -> Foo_old
   inc (s,i) = (s,i+1)

   dec :: Foo_old -> Foo_old
   dec (s,i) = (s, i-1)

   replaceMsg :: String -> Foo_old -> Foo_old
   replaceMsg s f = (s, (getInt f))

   replaceInt :: Foo_old -> Int -> Foo_old
   replaceInt f i = (getStr f, i)

   countDown :: Foo_old -> IO ()
   countDown foo = do
      putStrLn $ fst foo
      if (snd foo) <= 0 
         then 
            putStrLn "Exiting..."
         else do
            threadDelay 1000000
            countDown $ dec foo